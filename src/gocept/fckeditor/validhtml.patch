Index: editor/dialog/fck_paste/fck_paste.js
===================================================================
--- editor/dialog/fck_paste/fck_paste.js	(revision 0)
+++ editor/dialog/fck_paste/fck_paste.js	(revision 0)
@@ -0,0 +1,285 @@
+/*
+ * FCKeditor - The text editor for Internet - http://www.fckeditor.net
+ * Copyright (C) 2003-2008 Frederico Caldeira Knabben
+ *
+ * == BEGIN LICENSE ==
+ *
+ * Licensed under the terms of any of the following licenses at your
+ * choice:
+ *
+ *  - GNU General Public License Version 2 or later (the "GPL")
+ *    http://www.gnu.org/licenses/gpl.html
+ *
+ *  - GNU Lesser General Public License Version 2.1 or later (the "LGPL")
+ *    http://www.gnu.org/licenses/lgpl.html
+ *
+ *  - Mozilla Public License Version 1.1 or later (the "MPL")
+ *    http://www.mozilla.org/MPL/MPL-1.1.html
+ *
+ * == END LICENSE ==
+ */
+
+var dialog = window.parent ;
+var oEditor = dialog.InnerDialogLoaded() ;
+var FCK = oEditor.FCK;
+var FCKTools	= oEditor.FCKTools ;
+var FCKConfig	= oEditor.FCKConfig ;
+var FCKBrowserInfo = oEditor.FCKBrowserInfo ;
+
+window.onload = function ()
+{
+	// First of all, translate the dialog box texts
+	oEditor.FCKLanguageManager.TranslatePage(document) ;
+
+	var sPastingType = dialog.Args().CustomValue ;
+
+	if ( sPastingType == 'Word' || sPastingType == 'Security' )
+	{
+		if ( sPastingType == 'Security' )
+			document.getElementById( 'xSecurityMsg' ).style.display = '' ;
+
+		// For document.domain compatibility (#123) we must do all the magic in
+		// the URL for IE.
+		var sFrameUrl = !oEditor.FCK_IS_CUSTOM_DOMAIN || !FCKBrowserInfo.IsIE ?
+			'javascript:void(0)' :
+			'javascript:void( (function(){' +
+				'document.open() ;' +
+				'document.domain=\'' + document.domain + '\' ;' +
+				'document.write(\'<html><head><script>window.onerror = function() { return true ; };<\/script><\/head><body><\/body><\/html>\') ;' +
+				'document.close() ;' +
+				'document.body.contentEditable = true ;' +
+				'window.focus() ;' +
+				'})() )' ;
+
+		var eFrameSpace = document.getElementById( 'xFrameSpace' ) ;
+		eFrameSpace.innerHTML = '<iframe id="frmData" src="' + sFrameUrl + '" ' +
+					'height="98%" width="99%" frameborder="0" style="border: #000000 1px; background-color: #ffffff"></iframe>' ;
+
+		var oFrame = eFrameSpace.firstChild ;
+
+		if ( !oEditor.FCK_IS_CUSTOM_DOMAIN || !FCKBrowserInfo.IsIE )
+		{
+			// Avoid errors if the pasted content has any script that fails: #389
+			var oDoc = oFrame.contentWindow.document ;
+			oDoc.open() ;
+			oDoc.write('<html><head><script>window.onerror = function() { return true ; };<\/script><\/head><body><\/body><\/html>') ;
+			oDoc.close() ;
+
+			if ( FCKBrowserInfo.IsIE )
+				oDoc.body.contentEditable = true ;
+			else
+				oDoc.designMode = 'on' ;
+
+			oFrame.contentWindow.focus();
+		}
+	}
+	else
+	{
+		document.getElementById('txtData').style.display = '' ;
+	}
+
+	if ( sPastingType != 'Word' )
+		document.getElementById('oWordCommands').style.display = 'none' ;
+
+	dialog.SetOkButton( true ) ;
+	dialog.SetAutoSize( true ) ;
+}
+
+function Ok()
+{
+	// Before doing anything, save undo snapshot.
+	oEditor.FCKUndo.SaveUndoStep() ;
+
+	var sHtml ;
+
+	var sPastingType = dialog.Args().CustomValue ;
+
+	if ( sPastingType == 'Word' || sPastingType == 'Security' )
+	{
+		var oFrame = document.getElementById('frmData') ;
+		var oBody ;
+
+		if ( oFrame.contentDocument )
+			oBody = oFrame.contentDocument.body ;
+		else
+			oBody = oFrame.contentWindow.document.body ;
+
+		if ( sPastingType == 'Word' )
+		{
+			// If a plugin creates a FCK.CustomCleanWord function it will be called instead of the default one
+			if ( typeof( FCK.CustomCleanWord ) == 'function' )
+				sHtml = FCK.CustomCleanWord( oBody, document.getElementById('chkRemoveFont').checked, document.getElementById('chkRemoveStyles').checked ) ;
+			else
+				sHtml = CleanWord( oBody, document.getElementById('chkRemoveFont').checked, document.getElementById('chkRemoveStyles').checked ) ;
+		}
+		else
+			sHtml = oBody.innerHTML ;
+
+		// Fix relative anchor URLs (IE automatically adds the current page URL).
+		var re = new RegExp( window.location + "#", "g" ) ;
+		sHtml = sHtml.replace( re, '#') ;
+	}
+	else
+	{
+		sHtml = oEditor.FCKTools.HTMLEncode( document.getElementById('txtData').value )  ;
+		sHtml = FCKTools.ProcessLineBreaks( oEditor, FCKConfig, sHtml ) ;
+
+		// FCK.InsertHtml() does not work for us, since document fragments cannot contain node fragments. :(
+		// Use the marker method instead. It's primitive, but it works.
+		var range = new oEditor.FCKDomRange( oEditor.FCK.EditorWindow ) ;
+		var oDoc = oEditor.FCK.EditorDocument ;
+		dialog.Selection.EnsureSelection() ;
+		range.MoveToSelection() ;
+		range.DeleteContents() ;
+		var marker = [] ;
+		for ( var i = 0 ; i < 5 ; i++ )
+			marker.push( parseInt(Math.random() * 100000, 10 ) ) ;
+		marker = marker.join( "" ) ;
+		range.InsertNode ( oDoc.createTextNode( marker ) ) ;
+		var bookmark = range.CreateBookmark() ;
+
+		// Now we've got a marker indicating the paste position in the editor document.
+		// Find its position in the HTML code.
+		var htmlString = oDoc.body.innerHTML ;
+		var index = htmlString.indexOf( marker ) ;
+
+		// Split it the HTML code up, add the code we generated, and put them back together.
+		var htmlList = [] ;
+		htmlList.push( htmlString.substr( 0, index ) ) ;
+		htmlList.push( sHtml ) ;
+		htmlList.push( htmlString.substr( index + marker.length ) ) ;
+		htmlString = htmlList.join( "" ) ;
+
+		if ( oEditor.FCKBrowserInfo.IsIE )
+			oEditor.FCK.SetInnerHtml( htmlString ) ;
+		else
+			oDoc.body.innerHTML = htmlString ;
+
+		range.MoveToBookmark( bookmark ) ;
+		range.Collapse( false ) ;
+		range.Select() ;
+		range.Release() ;
+		return true ;
+	}
+
+	oEditor.FCK.InsertHtml( sHtml ) ;
+
+	return true ;
+}
+
+// This function will be called from the PasteFromWord dialog (fck_paste.html)
+// Input: oNode a DOM node that contains the raw paste from the clipboard
+// bIgnoreFont, bRemoveStyles booleans according to the values set in the dialog
+// Output: the cleaned string
+function CleanWord( oNode, bIgnoreFont, bRemoveStyles )
+{
+	var html = oNode.innerHTML ;
+
+	html = html.replace(/<o:p>\s*<\/o:p>/g, '') ;
+	html = html.replace(/<o:p>.*?<\/o:p>/g, '&nbsp;') ;
+
+	// Remove mso-xxx styles.
+	html = html.replace( /\s*mso-[^:]+:[^;"]+;?/gi, '' ) ;
+
+	// Remove margin styles.
+	html = html.replace( /\s*MARGIN: 0cm 0cm 0pt\s*;/gi, '' ) ;
+	html = html.replace( /\s*MARGIN: 0cm 0cm 0pt\s*"/gi, "\"" ) ;
+
+	html = html.replace( /\s*TEXT-INDENT: 0cm\s*;/gi, '' ) ;
+	html = html.replace( /\s*TEXT-INDENT: 0cm\s*"/gi, "\"" ) ;
+
+	html = html.replace( /\s*TEXT-ALIGN: [^\s;]+;?"/gi, "\"" ) ;
+
+	html = html.replace( /\s*PAGE-BREAK-BEFORE: [^\s;]+;?"/gi, "\"" ) ;
+
+	html = html.replace( /\s*FONT-VARIANT: [^\s;]+;?"/gi, "\"" ) ;
+
+	html = html.replace( /\s*tab-stops:[^;"]*;?/gi, '' ) ;
+	html = html.replace( /\s*tab-stops:[^"]*/gi, '' ) ;
+
+	// Remove FONT face attributes.
+	if ( bIgnoreFont )
+	{
+		html = html.replace( /\s*face="[^"]*"/gi, '' ) ;
+		html = html.replace( /\s*face=[^ >]*/gi, '' ) ;
+
+		html = html.replace( /\s*FONT-FAMILY:[^;"]*;?/gi, '' ) ;
+	}
+
+	// Remove Class attributes
+	html = html.replace(/<(\w[^>]*) class=([^ |>]*)([^>]*)/gi, "<$1$3") ;
+
+	// Remove styles.
+	if ( bRemoveStyles )
+		html = html.replace( /<(\w[^>]*) style="([^\"]*)"([^>]*)/gi, "<$1$3" ) ;
+
+	// Remove empty styles.
+	html =  html.replace( /\s*style="\s*"/gi, '' ) ;
+
+	html = html.replace( /<SPAN\s*[^>]*>\s*&nbsp;\s*<\/SPAN>/gi, '&nbsp;' ) ;
+
+	html = html.replace( /<SPAN\s*[^>]*><\/SPAN>/gi, '' ) ;
+
+	// Remove Lang attributes
+	html = html.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3") ;
+
+	html = html.replace( /<SPAN\s*>(.*?)<\/SPAN>/gi, '$1' ) ;
+
+	html = html.replace( /<FONT\s*>(.*?)<\/FONT>/gi, '$1' ) ;
+
+	// Remove XML elements and declarations
+	html = html.replace(/<\\?\?xml[^>]*>/gi, '' ) ;
+
+	// Remove Tags with XML namespace declarations: <o:p><\/o:p>
+	html = html.replace(/<\/?\w+:[^>]*>/gi, '' ) ;
+
+	// Remove comments [SF BUG-1481861].
+	html = html.replace(/<\!--.*?-->/g, '' ) ;
+
+	html = html.replace( /<(U|I|STRIKE)>&nbsp;<\/\1>/g, '&nbsp;' ) ;
+
+	html = html.replace( /<H\d>\s*<\/H\d>/gi, '' ) ;
+
+	// Remove "display:none" tags.
+	html = html.replace( /<(\w+)[^>]*\sstyle="[^"]*DISPLAY\s?:\s?none(.*?)<\/\1>/ig, '' ) ;
+
+	// Remove language tags
+	html = html.replace( /<(\w[^>]*) language=([^ |>]*)([^>]*)/gi, "<$1$3") ;
+
+	// Remove onmouseover and onmouseout events (from MS Word comments effect)
+	html = html.replace( /<(\w[^>]*) onmouseover="([^\"]*)"([^>]*)/gi, "<$1$3") ;
+	html = html.replace( /<(\w[^>]*) onmouseout="([^\"]*)"([^>]*)/gi, "<$1$3") ;
+
+	if ( FCKConfig.CleanWordKeepsStructure )
+	{
+		// The original <Hn> tag send from Word is something like this: <Hn style="margin-top:0px;margin-bottom:0px">
+		html = html.replace( /<H(\d)([^>]*)>/gi, '<h$1>' ) ;
+
+		// Word likes to insert extra <font> tags, when using MSIE. (Wierd).
+		html = html.replace( /<(H\d)><FONT[^>]*>(.*?)<\/FONT><\/\1>/gi, '<$1>$2<\/$1>' );
+		html = html.replace( /<(H\d)><EM>(.*?)<\/EM><\/\1>/gi, '<$1>$2<\/$1>' );
+	}
+	else
+	{
+		html = html.replace( /<H1([^>]*)>/gi, '<div$1><b><font size="6">' ) ;
+		html = html.replace( /<H2([^>]*)>/gi, '<div$1><b><font size="5">' ) ;
+		html = html.replace( /<H3([^>]*)>/gi, '<div$1><b><font size="4">' ) ;
+		html = html.replace( /<H4([^>]*)>/gi, '<div$1><b><font size="3">' ) ;
+		html = html.replace( /<H5([^>]*)>/gi, '<div$1><b><font size="2">' ) ;
+		html = html.replace( /<H6([^>]*)>/gi, '<div$1><b><font size="1">' ) ;
+
+		html = html.replace( /<\/H\d>/gi, '<\/font><\/b><\/div>' ) ;
+
+		// Transform <P> to <DIV>
+		var re = new RegExp( '(<P)([^>]*>.*?)(<\/P>)', 'gi' ) ;	// Different because of a IE 5.0 error
+		html = html.replace( re, '<div$2<\/div>' ) ;
+
+		// Remove empty tags (three times, just to be sure).
+		// This also removes any empty anchor
+		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
+		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
+		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
+	}
+
+	return html ;
+}
Index: editor/dialog/fck_paste.html
===================================================================
--- editor/dialog/fck_paste.html	(revision 1942)
+++ editor/dialog/fck_paste.html	(working copy)
@@ -29,274 +29,8 @@
 	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 	<meta name="robots" content="noindex, nofollow" />
 	<script src="common/fck_dialog_common.js" type="text/javascript"></script>
-	<script type="text/javascript">
-var dialog = window.parent ;
-var oEditor = dialog.InnerDialogLoaded() ;
-var FCK = oEditor.FCK;
-var FCKTools	= oEditor.FCKTools ;
-var FCKConfig	= oEditor.FCKConfig ;
-var FCKBrowserInfo = oEditor.FCKBrowserInfo ;
+	<script type="text/javascript" src="fck_paste/fck_paste.js"></script>
 
-window.onload = function ()
-{
-	// First of all, translate the dialog box texts
-	oEditor.FCKLanguageManager.TranslatePage(document) ;
-
-	var sPastingType = dialog.Args().CustomValue ;
-
-	if ( sPastingType == 'Word' || sPastingType == 'Security' )
-	{
-		if ( sPastingType == 'Security' )
-			document.getElementById( 'xSecurityMsg' ).style.display = '' ;
-
-		// For document.domain compatibility (#123) we must do all the magic in
-		// the URL for IE.
-		var sFrameUrl = !oEditor.FCK_IS_CUSTOM_DOMAIN || !FCKBrowserInfo.IsIE ?
-			'javascript:void(0)' :
-			'javascript:void( (function(){' +
-				'document.open() ;' +
-				'document.domain=\'' + document.domain + '\' ;' +
-				'document.write(\'<html><head><script>window.onerror = function() { return true ; };<\/script><\/head><body><\/body><\/html>\') ;' +
-				'document.close() ;' +
-				'document.body.contentEditable = true ;' +
-				'window.focus() ;' +
-				'})() )' ;
-
-		var eFrameSpace = document.getElementById( 'xFrameSpace' ) ;
-		eFrameSpace.innerHTML = '<iframe id="frmData" src="' + sFrameUrl + '" ' +
-					'height="98%" width="99%" frameborder="0" style="border: #000000 1px; background-color: #ffffff"></iframe>' ;
-
-		var oFrame = eFrameSpace.firstChild ;
-
-		if ( !oEditor.FCK_IS_CUSTOM_DOMAIN || !FCKBrowserInfo.IsIE )
-		{
-			// Avoid errors if the pasted content has any script that fails: #389
-			var oDoc = oFrame.contentWindow.document ;
-			oDoc.open() ;
-			oDoc.write('<html><head><script>window.onerror = function() { return true ; };<\/script><\/head><body><\/body><\/html>') ;
-			oDoc.close() ;
-
-			if ( FCKBrowserInfo.IsIE )
-				oDoc.body.contentEditable = true ;
-			else
-				oDoc.designMode = 'on' ;
-
-			oFrame.contentWindow.focus();
-		}
-	}
-	else
-	{
-		document.getElementById('txtData').style.display = '' ;
-	}
-
-	if ( sPastingType != 'Word' )
-		document.getElementById('oWordCommands').style.display = 'none' ;
-
-	dialog.SetOkButton( true ) ;
-	dialog.SetAutoSize( true ) ;
-}
-
-function Ok()
-{
-	// Before doing anything, save undo snapshot.
-	oEditor.FCKUndo.SaveUndoStep() ;
-
-	var sHtml ;
-
-	var sPastingType = dialog.Args().CustomValue ;
-
-	if ( sPastingType == 'Word' || sPastingType == 'Security' )
-	{
-		var oFrame = document.getElementById('frmData') ;
-		var oBody ;
-
-		if ( oFrame.contentDocument )
-			oBody = oFrame.contentDocument.body ;
-		else
-			oBody = oFrame.contentWindow.document.body ;
-
-		if ( sPastingType == 'Word' )
-		{
-			// If a plugin creates a FCK.CustomCleanWord function it will be called instead of the default one
-			if ( typeof( FCK.CustomCleanWord ) == 'function' )
-				sHtml = FCK.CustomCleanWord( oBody, document.getElementById('chkRemoveFont').checked, document.getElementById('chkRemoveStyles').checked ) ;
-			else
-				sHtml = CleanWord( oBody, document.getElementById('chkRemoveFont').checked, document.getElementById('chkRemoveStyles').checked ) ;
-		}
-		else
-			sHtml = oBody.innerHTML ;
-
-		// Fix relative anchor URLs (IE automatically adds the current page URL).
-		var re = new RegExp( window.location + "#", "g" ) ;
-		sHtml = sHtml.replace( re, '#') ;
-	}
-	else
-	{
-		sHtml = oEditor.FCKTools.HTMLEncode( document.getElementById('txtData').value )  ;
-		sHtml = FCKTools.ProcessLineBreaks( oEditor, FCKConfig, sHtml ) ;
-
-		// FCK.InsertHtml() does not work for us, since document fragments cannot contain node fragments. :(
-		// Use the marker method instead. It's primitive, but it works.
-		var range = new oEditor.FCKDomRange( oEditor.FCK.EditorWindow ) ;
-		var oDoc = oEditor.FCK.EditorDocument ;
-		dialog.Selection.EnsureSelection() ;
-		range.MoveToSelection() ;
-		range.DeleteContents() ;
-		var marker = [] ;
-		for ( var i = 0 ; i < 5 ; i++ )
-			marker.push( parseInt(Math.random() * 100000, 10 ) ) ;
-		marker = marker.join( "" ) ;
-		range.InsertNode ( oDoc.createTextNode( marker ) ) ;
-		var bookmark = range.CreateBookmark() ;
-
-		// Now we've got a marker indicating the paste position in the editor document.
-		// Find its position in the HTML code.
-		var htmlString = oDoc.body.innerHTML ;
-		var index = htmlString.indexOf( marker ) ;
-
-		// Split it the HTML code up, add the code we generated, and put them back together.
-		var htmlList = [] ;
-		htmlList.push( htmlString.substr( 0, index ) ) ;
-		htmlList.push( sHtml ) ;
-		htmlList.push( htmlString.substr( index + marker.length ) ) ;
-		htmlString = htmlList.join( "" ) ;
-
-		if ( oEditor.FCKBrowserInfo.IsIE )
-			oEditor.FCK.SetInnerHtml( htmlString ) ;
-		else
-			oDoc.body.innerHTML = htmlString ;
-
-		range.MoveToBookmark( bookmark ) ;
-		range.Collapse( false ) ;
-		range.Select() ;
-		range.Release() ;
-		return true ;
-	}
-
-	oEditor.FCK.InsertHtml( sHtml ) ;
-
-	return true ;
-}
-
-// This function will be called from the PasteFromWord dialog (fck_paste.html)
-// Input: oNode a DOM node that contains the raw paste from the clipboard
-// bIgnoreFont, bRemoveStyles booleans according to the values set in the dialog
-// Output: the cleaned string
-function CleanWord( oNode, bIgnoreFont, bRemoveStyles )
-{
-	var html = oNode.innerHTML ;
-
-	html = html.replace(/<o:p>\s*<\/o:p>/g, '') ;
-	html = html.replace(/<o:p>.*?<\/o:p>/g, '&nbsp;') ;
-
-	// Remove mso-xxx styles.
-	html = html.replace( /\s*mso-[^:]+:[^;"]+;?/gi, '' ) ;
-
-	// Remove margin styles.
-	html = html.replace( /\s*MARGIN: 0cm 0cm 0pt\s*;/gi, '' ) ;
-	html = html.replace( /\s*MARGIN: 0cm 0cm 0pt\s*"/gi, "\"" ) ;
-
-	html = html.replace( /\s*TEXT-INDENT: 0cm\s*;/gi, '' ) ;
-	html = html.replace( /\s*TEXT-INDENT: 0cm\s*"/gi, "\"" ) ;
-
-	html = html.replace( /\s*TEXT-ALIGN: [^\s;]+;?"/gi, "\"" ) ;
-
-	html = html.replace( /\s*PAGE-BREAK-BEFORE: [^\s;]+;?"/gi, "\"" ) ;
-
-	html = html.replace( /\s*FONT-VARIANT: [^\s;]+;?"/gi, "\"" ) ;
-
-	html = html.replace( /\s*tab-stops:[^;"]*;?/gi, '' ) ;
-	html = html.replace( /\s*tab-stops:[^"]*/gi, '' ) ;
-
-	// Remove FONT face attributes.
-	if ( bIgnoreFont )
-	{
-		html = html.replace( /\s*face="[^"]*"/gi, '' ) ;
-		html = html.replace( /\s*face=[^ >]*/gi, '' ) ;
-
-		html = html.replace( /\s*FONT-FAMILY:[^;"]*;?/gi, '' ) ;
-	}
-
-	// Remove Class attributes
-	html = html.replace(/<(\w[^>]*) class=([^ |>]*)([^>]*)/gi, "<$1$3") ;
-
-	// Remove styles.
-	if ( bRemoveStyles )
-		html = html.replace( /<(\w[^>]*) style="([^\"]*)"([^>]*)/gi, "<$1$3" ) ;
-
-	// Remove empty styles.
-	html =  html.replace( /\s*style="\s*"/gi, '' ) ;
-
-	html = html.replace( /<SPAN\s*[^>]*>\s*&nbsp;\s*<\/SPAN>/gi, '&nbsp;' ) ;
-
-	html = html.replace( /<SPAN\s*[^>]*><\/SPAN>/gi, '' ) ;
-
-	// Remove Lang attributes
-	html = html.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3") ;
-
-	html = html.replace( /<SPAN\s*>(.*?)<\/SPAN>/gi, '$1' ) ;
-
-	html = html.replace( /<FONT\s*>(.*?)<\/FONT>/gi, '$1' ) ;
-
-	// Remove XML elements and declarations
-	html = html.replace(/<\\?\?xml[^>]*>/gi, '' ) ;
-
-	// Remove Tags with XML namespace declarations: <o:p><\/o:p>
-	html = html.replace(/<\/?\w+:[^>]*>/gi, '' ) ;
-
-	// Remove comments [SF BUG-1481861].
-	html = html.replace(/<\!--.*?-->/g, '' ) ;
-
-	html = html.replace( /<(U|I|STRIKE)>&nbsp;<\/\1>/g, '&nbsp;' ) ;
-
-	html = html.replace( /<H\d>\s*<\/H\d>/gi, '' ) ;
-
-	// Remove "display:none" tags.
-	html = html.replace( /<(\w+)[^>]*\sstyle="[^"]*DISPLAY\s?:\s?none(.*?)<\/\1>/ig, '' ) ;
-
-	// Remove language tags
-	html = html.replace( /<(\w[^>]*) language=([^ |>]*)([^>]*)/gi, "<$1$3") ;
-
-	// Remove onmouseover and onmouseout events (from MS Word comments effect)
-	html = html.replace( /<(\w[^>]*) onmouseover="([^\"]*)"([^>]*)/gi, "<$1$3") ;
-	html = html.replace( /<(\w[^>]*) onmouseout="([^\"]*)"([^>]*)/gi, "<$1$3") ;
-
-	if ( FCKConfig.CleanWordKeepsStructure )
-	{
-		// The original <Hn> tag send from Word is something like this: <Hn style="margin-top:0px;margin-bottom:0px">
-		html = html.replace( /<H(\d)([^>]*)>/gi, '<h$1>' ) ;
-
-		// Word likes to insert extra <font> tags, when using MSIE. (Wierd).
-		html = html.replace( /<(H\d)><FONT[^>]*>(.*?)<\/FONT><\/\1>/gi, '<$1>$2<\/$1>' );
-		html = html.replace( /<(H\d)><EM>(.*?)<\/EM><\/\1>/gi, '<$1>$2<\/$1>' );
-	}
-	else
-	{
-		html = html.replace( /<H1([^>]*)>/gi, '<div$1><b><font size="6">' ) ;
-		html = html.replace( /<H2([^>]*)>/gi, '<div$1><b><font size="5">' ) ;
-		html = html.replace( /<H3([^>]*)>/gi, '<div$1><b><font size="4">' ) ;
-		html = html.replace( /<H4([^>]*)>/gi, '<div$1><b><font size="3">' ) ;
-		html = html.replace( /<H5([^>]*)>/gi, '<div$1><b><font size="2">' ) ;
-		html = html.replace( /<H6([^>]*)>/gi, '<div$1><b><font size="1">' ) ;
-
-		html = html.replace( /<\/H\d>/gi, '<\/font><\/b><\/div>' ) ;
-
-		// Transform <P> to <DIV>
-		var re = new RegExp( '(<P)([^>]*>.*?)(<\/P>)', 'gi' ) ;	// Different because of a IE 5.0 error
-		html = html.replace( re, '<div$2<\/div>' ) ;
-
-		// Remove empty tags (three times, just to be sure).
-		// This also removes any empty anchor
-		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
-		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
-		html = html.replace( /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g, '' ) ;
-	}
-
-	return html ;
-}
-
-	</script>
-
 </head>
 <body style="overflow: hidden">
 	<table cellspacing="0" cellpadding="0" width="100%" border="0" style="height: 98%">
Index: editor/dialog/fck_image.html
===================================================================
--- editor/dialog/fck_image.html	(revision 1942)
+++ editor/dialog/fck_image.html	(working copy)
@@ -165,7 +165,7 @@
 			<br />
 			<input id="btnUpload" type="submit" value="Send it to the Server" fcklang="DlgLnkBtnUpload" />
 			<script type="text/javascript">
-				document.write( '<iframe name="UploadWindow" style="display: none" src="' + FCKTools.GetVoidUrl() + '"></iframe>' ) ;
+                          document.write( '&lt;iframe name="UploadWindow" style="display: none" src="' + FCKTools.GetVoidUrl() + '"&gt;&lt;/iframe&gt;' ) ;
 			</script>
 		</form>
 	</div>
Index: editor/fckdialog.html
===================================================================
--- editor/fckdialog.html	(revision 1942)
+++ editor/fckdialog.html	(working copy)
@@ -26,708 +26,7 @@
 		<title></title>
 		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 		<meta name="robots" content="noindex, nofollow" />
-		<script type="text/javascript">
-// Domain relaxation logic.
-(function()
-{
-	var d = document.domain ;
-
-	while ( true )
-	{
-		// Test if we can access a parent property.
-		try
-		{
-			var parentDomain = ( Args().TopWindow || E ).document.domain ;
-
-			if ( document.domain != parentDomain )
-				document.domain = parentDomain ;
-
-			break ;
-		}
-		catch( e ) {}
-
-		// Remove a domain part: www.mytest.example.com => mytest.example.com => example.com ...
-		d = d.replace( /.*?(?:\.|$)/, '' ) ;
-
-		if ( d.length == 0 )
-			break ;		// It was not able to detect the domain.
-
-		document.domain = d ;
-	}
-})() ;
-
-var E = frameElement._DialogArguments.Editor ;
-
-// It seems referencing to frameElement._DialogArguments directly would lead to memory leaks in IE.
-// So let's use functions to access its members instead.
-function Args()
-{
-	return frameElement._DialogArguments ;
-}
-
-function ParentDialog( dialog )
-{
-	return dialog ? dialog._ParentDialog : frameElement._ParentDialog ;
-}
-
-var FCK				= E.FCK ;
-var FCKTools		= E.FCKTools ;
-var FCKDomTools		= E.FCKDomTools ;
-var FCKDialog		= E.FCKDialog ;
-var FCKBrowserInfo	= E.FCKBrowserInfo ;
-var FCKConfig		= E.FCKConfig ;
-
-// Steal the focus so that the caret would no longer stay in the editor iframe.
-window.focus() ;
-
-// Sets the Skin CSS
-document.write( FCKTools.GetStyleHtml( FCKConfig.SkinDialogCSS ) ) ;
-
-// Sets the language direction.
-var langDir = document.documentElement.dir = E.FCKLang.Dir ;
-
-// For IE6-, the fck_dialog_ie6.js is loaded, used to fix limitations in the browser.
-if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
-	document.write( '<' + 'script type="text/javascript" src="' + FCKConfig.SkinPath + 'fck_dialog_ie6.js"><' + '\/script>' ) ;
-
-FCKTools.RegisterDollarFunction( window ) ;
-
-// Resize related functions.
-var Sizer = function()
-{
-	var bAutoSize = false ;
-
-	var retval = {
-		// Sets whether the dialog should auto-resize according to its content's height.
-		SetAutoSize : function( autoSize )
-		{
-			bAutoSize = autoSize ;
-			this.RefreshSize() ;
-		},
-
-		// Fit the dialog container's layout to the inner iframe's external size.
-		RefreshContainerSize : function()
-		{
-			var frmMain = $( 'frmMain' ) ;
-
-			if ( frmMain )
-			{
-				// Get the container size.
-				var height = $( 'contents' ).offsetHeight ;
-
-				// Subtract the size of other elements.
-				height -= $( 'TitleArea' ).offsetHeight ;
-				height -= $( 'TabsRow' ).offsetHeight ;
-				height -= $( 'PopupButtons' ).offsetHeight ;
-
-				frmMain.style.height = Math.max( height, 0 ) + 'px' ;
-			}
-		},
-
-		// Resize and re-layout the dialog.
-		// Triggers the onresize event for the layout logic.
-		ResizeDialog : function( width, height )
-		{
-			FCKDomTools.SetElementStyles( window.frameElement,
-					{
-						'width' : width + 'px',
-						'height' : height + 'px'
-					} ) ;
-
-			// If the skin have defined a function for resize fixes, call it now.
-			if ( typeof window.DoResizeFixes == 'function' )
-				window.DoResizeFixes() ;
-		},
-
-		// if bAutoSize is true, automatically fit the dialog size and layout to
-		// accomodate the inner iframe's internal height.
-		// if bAutoSize is false, then only the layout logic for the dialog decorations
-		// is run to accomodate the inner iframe's external height.
-		RefreshSize : function()
-		{
-			if ( bAutoSize )
-			{
-				var frmMain		= $( 'frmMain' ) ;
-				var innerDoc	= frmMain.contentWindow.document ;
-				var isStrict	= FCKTools.IsStrictMode( innerDoc ) ;
-
-				// Get the size of the frame contents.
-				var innerWidth	= isStrict ? innerDoc.documentElement.scrollWidth : innerDoc.body.scrollWidth ;
-				var innerHeight	= isStrict ? innerDoc.documentElement.scrollHeight : innerDoc.body.scrollHeight ;
-
-				// Get the current frame size.
-				var frameSize = FCKTools.GetViewPaneSize( frmMain.contentWindow ) ;
-
-				var deltaWidth	= innerWidth - frameSize.Width ;
-				var deltaHeight	= innerHeight - frameSize.Height ;
-
-				// If the contents fits the current size.
-				if ( deltaWidth <= 0 && deltaHeight <= 0 )
-					return ;
-
-				var dialogWidth		= frameElement.offsetWidth + Math.max( deltaWidth, 0 ) ;
-				var dialogHeight	= frameElement.offsetHeight + Math.max( deltaHeight, 0 ) ;
-
-				this.ResizeDialog( dialogWidth, dialogHeight ) ;
-			}
-			this.RefreshContainerSize() ;
-		}
-	}
-
-	/**
-	 * Safari seems to have a bug with the time when RefreshSize() is executed - it
-	 * thinks frmMain's innerHeight is 0 if we query the value too soon after the
-	 * page is loaded in some circumstances. (#1316)
-	 * TODO : Maybe this is not needed anymore after #35.
-	 */
-	if ( FCKBrowserInfo.IsSafari )
-	{
-		var originalRefreshSize = retval.RefreshSize ;
-
-		retval.RefreshSize = function()
-		{
-			FCKTools.SetTimeout( originalRefreshSize, 1, retval ) ;
-		}
-	}
-
-	window.onresize = function()
-	{
-		retval.RefreshContainerSize() ;
-	}
-
-	window.SetAutoSize = FCKTools.Bind( retval, retval.SetAutoSize ) ;
-
-	return retval ;
-}() ;
-
-// Manages the throbber image that appears if the inner part of dialog is taking too long to load.
-var Throbber = function()
-{
-	var timer ;
-
-	var updateThrobber = function()
-	{
-		var throbberParent = $( 'throbberBlock' ) ;
-		var throbberBlocks = throbberParent.childNodes ;
-		var lastClass = throbberParent.lastChild.className ;
-
-		// From the last to the second one, copy the class from the previous one.
-		for ( var i = throbberBlocks.length - 1 ; i > 0 ; i-- )
-			throbberBlocks[i].className = throbberBlocks[i-1].className ;
-
-		// For the first one, copy the last class (rotation).
-		throbberBlocks[0].className = lastClass ;
-	}
-
-	return {
-		Show : function( waitMilliseconds )
-		{
-			// Auto-setup the Show function to be called again after the
-			// requested amount of time.
-			if ( waitMilliseconds && waitMilliseconds > 0 )
-			{
-				timer = FCKTools.SetTimeout( this.Show, waitMilliseconds, this, null, window ) ;
-				return ;
-			}
-
-			var throbberParent = $( 'throbberBlock' ) ;
-
-			// Create the throbber blocks.
-			var classIds = [ 1,2,3,4,5,4,3,2 ] ;
-			while ( classIds.length > 0 )
-				throbberParent.appendChild( document.createElement( 'div' ) ).className = ' throbber_' + classIds.shift() ;
-
-			// Center the throbber.
-			var frm = $( 'contents' ) ;
-			var frmCoords = FCKTools.GetDocumentPosition( window, frm ) ;
-			var x = frmCoords.x + ( frm.offsetWidth - throbberParent.offsetWidth ) / 2 ;
-			var y = frmCoords.y + ( frm.offsetHeight - throbberParent.offsetHeight ) / 2 ;
-			throbberParent.style.left = parseInt( x, 10 ) + 'px' ;
-			throbberParent.style.top = parseInt( y, 10 ) + 'px' ;
-
-			// Show it.
-			throbberParent.style.visibility = ''  ;
-
-			// Setup the animation interval.
-			timer = setInterval( updateThrobber, 100 ) ;
-		},
-
-		Hide : function()
-		{
-			if ( timer )
-			{
-				clearInterval( timer ) ;
-				timer = null ;
-			}
-
-			var throbberParent = document.getElementById( 'throbberBlock' ) ;
-			if ( throbberParent )
-				FCKDomTools.RemoveNode( throbberParent ) ;
-		}
-	} ;
-}() ;
-
-// Drag and drop handlers.
-var DragAndDrop = function()
-{
-	var registeredWindows = [] ;
-	var lastCoords ;
-	var currentPos ;
-
-	var cleanUpHandlers = function()
-	{
-		for ( var i = 0 ; i < registeredWindows.length ; i++ )
-		{
-			FCKTools.RemoveEventListener( registeredWindows[i].document, 'mousemove', dragMouseMoveHandler ) ;
-			FCKTools.RemoveEventListener( registeredWindows[i].document, 'mouseup', dragMouseUpHandler ) ;
-		}
-	}
-
-	var dragMouseMoveHandler = function( evt )
-	{
-		if ( !lastCoords )
-			return ;
-
-		if ( !evt )
-			evt = FCKTools.GetElementDocument( this ).parentWindow.event ;
-
-		// Updated the last coordinates.
-		var currentCoords =
-		{
-			x : evt.screenX,
-			y : evt.screenY
-		} ;
-
-		currentPos =
-		{
-			x : currentPos.x + ( currentCoords.x - lastCoords.x ),
-			y : currentPos.y + ( currentCoords.y - lastCoords.y )
-		} ;
-
-		lastCoords = currentCoords ;
-
-		frameElement.style.left	= currentPos.x + 'px' ;
-		frameElement.style.top	= currentPos.y + 'px' ;
-
-		if ( evt.preventDefault )
-			evt.preventDefault() ;
-		else
-			evt.returnValue = false ;
-	}
-
-	var dragMouseUpHandler = function( evt )
-	{
-		if ( !lastCoords )
-			return ;
-		if ( !evt )
-			evt = FCKTools.GetElementDocument( this ).parentWindow.event ;
-		cleanUpHandlers() ;
-		lastCoords = null ;
-	}
-
-	return {
-
-		MouseDownHandler : function( evt )
-		{
-			var view = null ;
-			if ( !evt )
-			{
-				view = FCKTools.GetElementDocument( this ).parentWindow ;
-				evt = view.event ;
-			}
-			else
-				view = evt.view ;
-
-			var target = evt.srcElement || evt.target ;
-			if ( target.id == 'closeButton' || target.className == 'PopupTab' || target.className == 'PopupTabSelected' )
-				return ;
-
-			lastCoords =
-			{
-				x : evt.screenX,
-				y : evt.screenY
-			} ;
-
-			// Save the current IFRAME position.
-			currentPos =
-			{
-				x : parseInt( FCKDomTools.GetCurrentElementStyle( frameElement, 'left' ), 10 ),
-				y : parseInt( FCKDomTools.GetCurrentElementStyle( frameElement, 'top' ), 10 )
-			} ;
-
-			for ( var i = 0 ; i < registeredWindows.length ; i++ )
-			{
-				FCKTools.AddEventListener( registeredWindows[i].document, 'mousemove', dragMouseMoveHandler ) ;
-				FCKTools.AddEventListener( registeredWindows[i].document, 'mouseup', dragMouseUpHandler ) ;
-			}
-
-			if ( evt.preventDefault )
-				evt.preventDefault() ;
-			else
-				evt.returnValue = false ;
-		},
-
-		RegisterHandlers : function( w )
-		{
-			registeredWindows.push( w ) ;
-		}
-	}
-}() ;
-
-// Selection related functions.
-//(Became simple shortcuts after the fix for #1990)
-var Selection =
-{
-	/**
-	 * Ensures that the editing area contains an active selection. This is a
-	 * requirement for IE, as it looses the selection when the focus moves to other
-	 * frames.
-	 */
-	EnsureSelection : function()
-	{
-		FCK.Selection.Restore() ;
-	},
-
-	/**
-	 * Get the FCKSelection object for the editor instance.
-	 */
-	GetSelection : function()
-	{
-		return FCK.Selection ;
-	},
-
-	/**
-	 * Get the selected element in the editing area (for object selections).
-	 */
-	GetSelectedElement : function()
-	{
-		return FCK.Selection.GetSelectedElement() ;
-	}
-}
-
-// Tab related functions.
-var Tabs = function()
-{
-	// Only element ids should be stored here instead of element references since setSelectedTab and TabDiv_OnClick
-	// would build circular references with the element references inside and cause memory leaks in IE6.
-	var oTabs = new Object() ;
-
-	var setSelectedTab = function( tabCode )
-	{
-		for ( var sCode in oTabs )
-		{
-			if ( sCode == tabCode )
-				$( oTabs[sCode] ).className = 'PopupTabSelected' ;
-			else
-				$( oTabs[sCode] ).className = 'PopupTab' ;
-		}
-
-		if ( typeof( window.frames["frmMain"].OnDialogTabChange ) == 'function' )
-			window.frames["frmMain"].OnDialogTabChange( tabCode ) ;
-	}
-
-	function TabDiv_OnClick()
-	{
-		setSelectedTab( this.TabCode ) ;
-	}
-
-	window.AddTab = function( tabCode, tabText, startHidden )
-	{
-		if ( typeof( oTabs[ tabCode ] ) != 'undefined' )
-			return ;
-
-		var eTabsRow = $( 'Tabs' ) ;
-
-		var oCell = eTabsRow.insertCell(  eTabsRow.cells.length - 1 ) ;
-		oCell.noWrap = true ;
-
-		var oDiv = document.createElement( 'DIV' ) ;
-		oDiv.className = 'PopupTab' ;
-		oDiv.innerHTML = tabText ;
-		oDiv.TabCode = tabCode ;
-		oDiv.onclick = TabDiv_OnClick ;
-		oDiv.id = Math.random() ;
-
-		if ( startHidden )
-			oDiv.style.display = 'none' ;
-
-		eTabsRow = $( 'TabsRow' ) ;
-
-		oCell.appendChild( oDiv ) ;
-
-		if ( eTabsRow.style.display == 'none' )
-		{
-			var eTitleArea = $( 'TitleArea' ) ;
-			eTitleArea.className = 'PopupTitle' ;
-
-			oDiv.className = 'PopupTabSelected' ;
-			eTabsRow.style.display = '' ;
-
-			if ( window.onresize )
-				window.onresize() ;
-		}
-
-		oTabs[ tabCode ] = oDiv.id ;
-
-		FCKTools.DisableSelection( oDiv ) ;
-	} ;
-
-	window.SetSelectedTab = setSelectedTab ;
-
-	window.SetTabVisibility = function( tabCode, isVisible )
-	{
-		var oTab = $( oTabs[ tabCode ] ) ;
-		oTab.style.display = isVisible ? '' : 'none' ;
-
-		if ( ! isVisible && oTab.className == 'PopupTabSelected' )
-		{
-			for ( var sCode in oTabs )
-			{
-				if ( $( oTabs[sCode] ).style.display != 'none' )
-				{
-					setSelectedTab( sCode ) ;
-					break ;
-				}
-			}
-		}
-	} ;
-}() ;
-
-// readystatechange handler for registering drag and drop handlers in cover
-// iframes, defined out here to avoid memory leak.
-// Do NOT put this function as a private function as it will induce memory leak
-// in IE and it's not detectable with Drip or sIEve and undetectable leaks are
-// really nasty (sigh).
-var onReadyRegister = function()
-{
-	if ( this.readyState != 'complete' )
-		return ;
-	DragAndDrop.RegisterHandlers( this.contentWindow ) ;
-} ;
-
-// The business logic of the dialog, dealing with operational things like
-// dialog open/dialog close/enable/disable/etc.
-(function()
-{
-	var setOnKeyDown = function( targetDocument )
-	{
-		targetDocument.onkeydown = function ( e )
-		{
-			e = e || event || this.parentWindow.event ;
-			switch ( e.keyCode )
-			{
-				case 13 :		// ENTER
-					var oTarget = e.srcElement || e.target ;
-					if ( oTarget.tagName == 'TEXTAREA' )
-						return true ;
-					Ok() ;
-					return false ;
-
-				case 27 :		// ESC
-					Cancel() ;
-					return false ;
-			}
-			return true ;
-		}
-	} ;
-
-	var contextMenuBlocker = function( e )
-	{
-		var sTagName = e.target.tagName ;
-		if ( ! ( ( sTagName == "INPUT" && e.target.type == "text" ) || sTagName == "TEXTAREA" ) )
-			e.preventDefault() ;
-	} ;
-
-	var disableContextMenu = function( targetDocument )
-	{
-		if ( FCKBrowserInfo.IsIE )
-			return ;
-
-		targetDocument.addEventListener( 'contextmenu', contextMenuBlocker, true ) ;
-	} ;
-
-	// Program entry point.
-	window.Init = function()
-	{
-		// Start the throbber timer.
-		Throbber.Show( 1000 ) ;
-
-		Sizer.RefreshContainerSize() ;
-		LoadInnerDialog() ;
-
-		FCKTools.DisableSelection( document.body ) ;
-
-		// Make the title area draggable.
-		var titleElement = $( 'header' ) ;
-		titleElement.onmousedown = DragAndDrop.MouseDownHandler ;
-
-		// Connect mousemove and mouseup events from dialog frame and outer window to dialog dragging logic.
-		DragAndDrop.RegisterHandlers( window ) ;
-		DragAndDrop.RegisterHandlers( Args().TopWindow ) ;
-
-		// Disable the previous dialog if it exists.
-		if ( ParentDialog() )
-		{
-			ParentDialog().contentWindow.SetEnabled( false ) ;
-			if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
-			{
-				var currentParent = ParentDialog() ;
-				while ( currentParent )
-				{
-					var blockerFrame = currentParent.contentWindow.$( 'blocker' ) ;
-					if ( blockerFrame.readyState == 'complete' )
-						DragAndDrop.RegisterHandlers( blockerFrame.contentWindow ) ;
-					else
-						blockerFrame.onreadystatechange = onReadyRegister ;
-					currentParent = ParentDialog( currentParent ) ;
-				}
-			}
-			else
-			{
-				var currentParent = ParentDialog() ;
-				while ( currentParent )
-				{
-					DragAndDrop.RegisterHandlers( currentParent.contentWindow ) ;
-					currentParent = ParentDialog( currentParent ) ;
-				}
-			}
-		}
-
-		// If this is the only dialog on screen, enable the background cover.
-		if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
-		{
-			var blockerFrame = FCKDialog.GetCover().firstChild ;
-			if ( blockerFrame.readyState == 'complete' )
-				DragAndDrop.RegisterHandlers( blockerFrame.contentWindow ) ;
-			else
-				blockerFrame.onreadystatechange = onReadyRegister;
-		}
-
-		// Add Enter/Esc hotkeys and disable context menu for the dialog.
-		setOnKeyDown( document ) ;
-		disableContextMenu( document ) ;
-	} ;
-
-	window.LoadInnerDialog = function()
-	{
-		if ( window.onresize )
-			window.onresize() ;
-
-		// First of all, translate the dialog box contents.
-		E.FCKLanguageManager.TranslatePage( document ) ;
-
-		// Create the IFRAME that holds the dialog contents.
-		$( 'innerContents' ).innerHTML = '<iframe id="frmMain" src="' + Args().Page + '" name="frmMain" frameborder="0" width="100%" height="100%" scrolling="auto" style="visibility: hidden;" allowtransparency="true"></iframe>' ;
-	} ;
-
-	window.InnerDialogLoaded = function()
-	{
-		// If the dialog has been closed before the iframe is loaded, do nothing.
-		if ( !frameElement.parentNode )
-			return null ;
-
-		Throbber.Hide() ;
-
-		var frmMain = $('frmMain') ;
-		var innerWindow = frmMain.contentWindow ;
-		var innerDoc = innerWindow.document ;
-
-		// Show the loaded iframe.
-		frmMain.style.visibility = '' ;
-
-		// Set the language direction.
-		innerDoc.documentElement.dir = langDir ;
-
-		// Sets the Skin CSS.
-		innerDoc.write( FCKTools.GetStyleHtml( FCKConfig.SkinDialogCSS ) ) ;
-
-		setOnKeyDown( innerDoc ) ;
-		disableContextMenu( innerDoc ) ;
-
-		Sizer.RefreshContainerSize();
-
-		DragAndDrop.RegisterHandlers( innerWindow ) ;
-
-		innerWindow.focus() ;
-
-		return E ;
-	} ;
-
-	window.SetOkButton = function( showIt )
-	{
-		$('btnOk').style.visibility = ( showIt ? '' : 'hidden' ) ;
-	} ;
-
-	window.Ok = function()
-	{
-		Selection.EnsureSelection() ;
-
-		var frmMain = window.frames["frmMain"] ;
-
-		if ( frmMain.Ok && frmMain.Ok() )
-			CloseDialog() ;
-		else
-			frmMain.focus() ;
-	} ;
-
-	window.Cancel = function( dontFireChange )
-	{
-		Selection.EnsureSelection() ;
-		return CloseDialog( dontFireChange ) ;
-	} ;
-
-	window.CloseDialog = function( dontFireChange )
-	{
-		Throbber.Hide() ;
-
-		// Points the src to a non-existent location to avoid loading errors later, in case the dialog
-		// haven't been completed loaded at this point.
-		if ( $( 'frmMain' ) )
-			$( 'frmMain' ).src = FCKTools.GetVoidUrl() ;
-
-		if ( !dontFireChange && !FCK.EditMode )
-		{
-			// All dialog windows, by default, will fire the "OnSelectionChange"
-			// event, no matter the Ok or Cancel button has been pressed.
-			// It seems that OnSelectionChange may enter on a concurrency state
-			// on some situations (#1965), so we should put the event firing in
-			// the execution queue instead of executing it immediately.
-			setTimeout( function()
-				{
-					FCK.Events.FireEvent( 'OnSelectionChange' ) ;
-				}, 0 ) ;
-		}
-
-		FCKDialog.OnDialogClose( window ) ;
-	} ;
-
-	window.SetEnabled = function( isEnabled )
-	{
-		var cover = $( 'cover' ) ;
-		cover.style.display = isEnabled ? 'none' : '' ;
-
-		if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
-		{
-			if ( !isEnabled )
-			{
-				// Inser the blocker IFRAME before the cover.
-				var blocker = document.createElement( 'iframe' ) ;
-				blocker.src = FCKTools.GetVoidUrl() ;
-				blocker.hideFocus = true ;
-				blocker.frameBorder = 0 ;
-				blocker.id = blocker.className = 'blocker' ;
-				cover.appendChild( blocker ) ;
-			}
-			else
-			{
-				var blocker = $( 'blocker' ) ;
-				if ( blocker && blocker.parentNode )
-					blocker.parentNode.removeChild( blocker ) ;
-			}
-		}
-	} ;
-})() ;
-		</script>
+                <script src="js/fckdialog.js" type="text/javascript"></script>
 	</head>
 	<body onload="Init();" class="PopupBody">
 		<div class="contents" id="contents">
Index: editor/filemanager/browser/default/frmfolders.html
===================================================================
--- editor/filemanager/browser/default/frmfolders.html	(revision 1942)
+++ editor/filemanager/browser/default/frmfolders.html	(working copy)
@@ -27,164 +27,7 @@
 		<link href="browser.css" type="text/css" rel="stylesheet">
 		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
 		<script type="text/javascript" src="js/common.js"></script>
-		<script language="javascript">
-
-var sActiveFolder ;
-
-var bIsLoaded = false ;
-var iIntervalId ;
-
-var oListManager = new Object() ;
-
-oListManager.Init = function()
-{
-	this.Table = document.getElementById('tableFiles') ;
-	this.UpRow = document.getElementById('trUp') ;
-
-	this.TableRows = new Object() ;
-}
-
-oListManager.Clear = function()
-{
-	// Remove all other rows available.
-	while ( this.Table.rows.length > 1 )
-		this.Table.deleteRow(1) ;
-
-	// Reset the TableRows collection.
-	this.TableRows = new Object() ;
-}
-
-oListManager.AddItem = function( folderName, folderPath )
-{
-	// Create the new row.
-	var oRow = this.Table.insertRow(-1) ;
-	oRow.className = 'FolderListFolder' ;
-
-	// Build the link to view the folder.
-	var sLink = '<a href="#" onclick="OpenFolder(\'' + folderPath + '\');return false;">' ;
-
-	// Add the folder icon cell.
-	var oCell = oRow.insertCell(-1) ;
-	oCell.width = 16 ;
-	oCell.innerHTML = sLink + '<img alt="" src="images/spacer.gif" width="16" height="16" border="0"></a>' ;
-
-	// Add the folder name cell.
-	oCell = oRow.insertCell(-1) ;
-	oCell.noWrap = true ;
-	oCell.innerHTML = '&nbsp;' + sLink + folderName + '</a>' ;
-
-	this.TableRows[ folderPath ] = oRow ;
-}
-
-oListManager.ShowUpFolder = function( upFolderPath )
-{
-	this.UpRow.style.display = ( upFolderPath != null ? '' : 'none' ) ;
-
-	if ( upFolderPath != null )
-	{
-		document.getElementById('linkUpIcon').onclick = document.getElementById('linkUp').onclick = function()
-		{
-			LoadFolders( upFolderPath ) ;
-			return false ;
-		}
-	}
-}
-
-function CheckLoaded()
-{
-	if ( window.top.IsLoadedActualFolder
-		&& window.top.IsLoadedCreateFolder
-		&& window.top.IsLoadedUpload
-		&& window.top.IsLoadedResourcesList )
-	{
-		window.clearInterval( iIntervalId ) ;
-		bIsLoaded = true ;
-		OpenFolder( sActiveFolder ) ;
-	}
-}
-
-function OpenFolder( folderPath )
-{
-	sActiveFolder = folderPath ;
-
-	if ( ! bIsLoaded )
-	{
-		if ( ! iIntervalId )
-			iIntervalId = window.setInterval( CheckLoaded, 100 ) ;
-		return ;
-	}
-
-	// Change the style for the select row (to show the opened folder).
-	for ( var sFolderPath in oListManager.TableRows )
-	{
-		oListManager.TableRows[ sFolderPath ].className =
-			( sFolderPath == folderPath ? 'FolderListCurrentFolder' : 'FolderListFolder' ) ;
-	}
-
-	// Set the current folder in all frames.
-	window.parent.frames['frmActualFolder'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
-	window.parent.frames['frmCreateFolder'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
-	window.parent.frames['frmUpload'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
-
-	// Load the resources list for this folder.
-	window.parent.frames['frmResourcesList'].LoadResources( oConnector.ResourceType, folderPath ) ;
-}
-
-function LoadFolders( folderPath )
-{
-	// Clear the folders list.
-	oListManager.Clear() ;
-
-	// Get the parent folder path.
-	var sParentFolderPath ;
-	if ( folderPath != '/' )
-		sParentFolderPath = folderPath.substring( 0, folderPath.lastIndexOf( '/', folderPath.length - 2 ) + 1 ) ;
-
-	// Show/Hide the Up Folder.
-	oListManager.ShowUpFolder( sParentFolderPath ) ;
-
-	if ( folderPath != '/' )
-	{
-		sActiveFolder = folderPath ;
-		oConnector.CurrentFolder = sParentFolderPath ;
-		oConnector.SendCommand( 'GetFolders', null, GetFoldersCallBack ) ;
-	}
-	else
-		OpenFolder( '/' ) ;
-}
-
-function GetFoldersCallBack( fckXml )
-{
-	if ( oConnector.CheckError( fckXml ) != 0 )
-		return ;
-
-	// Get the current folder path.
-	var oNode = fckXml.SelectSingleNode( 'Connector/CurrentFolder' ) ;
-	var sCurrentFolderPath = oNode.attributes.getNamedItem('path').value ;
-
-	var oNodes = fckXml.SelectNodes( 'Connector/Folders/Folder' ) ;
-
-	for ( var i = 0 ; i < oNodes.length ; i++ )
-	{
-		var sFolderName = oNodes[i].attributes.getNamedItem('name').value ;
-		oListManager.AddItem( sFolderName, sCurrentFolderPath + sFolderName + '/' ) ;
-	}
-
-	OpenFolder( sActiveFolder ) ;
-}
-
-function SetResourceType( type )
-{
-	oConnector.ResourceType = type ;
-	LoadFolders( '/' ) ;
-}
-
-window.onload = function()
-{
-	oListManager.Init() ;
-	LoadFolders( '/' ) ;
-}
-		</script>
+                <script type="text/javascript" src="js/frmfolders.js"></script>
 	</head>
 	<body class="FileArea" bottomMargin="10" leftMargin="10" topMargin="10" rightMargin="10">
 		<table id="tableFiles" cellSpacing="0" cellPadding="0" width="100%" border="0">
Index: editor/filemanager/browser/default/js/frmfolders.js
===================================================================
--- editor/filemanager/browser/default/js/frmfolders.js	(revision 0)
+++ editor/filemanager/browser/default/js/frmfolders.js	(revision 0)
@@ -0,0 +1,176 @@
+/*
+ * FCKeditor - The text editor for Internet - http://www.fckeditor.net
+ * Copyright (C) 2003-2008 Frederico Caldeira Knabben
+ *
+ * == BEGIN LICENSE ==
+ *
+ * Licensed under the terms of any of the following licenses at your
+ * choice:
+ *
+ *  - GNU General Public License Version 2 or later (the "GPL")
+ *    http://www.gnu.org/licenses/gpl.html
+ *
+ *  - GNU Lesser General Public License Version 2.1 or later (the "LGPL")
+ *    http://www.gnu.org/licenses/lgpl.html
+ *
+ *  - Mozilla Public License Version 1.1 or later (the "MPL")
+ *    http://www.mozilla.org/MPL/MPL-1.1.html
+ *
+ * == END LICENSE ==
+ */
+
+var sActiveFolder ;
+
+var bIsLoaded = false ;
+var iIntervalId ;
+
+var oListManager = new Object() ;
+
+oListManager.Init = function()
+{
+	this.Table = document.getElementById('tableFiles') ;
+	this.UpRow = document.getElementById('trUp') ;
+
+	this.TableRows = new Object() ;
+}
+
+oListManager.Clear = function()
+{
+	// Remove all other rows available.
+	while ( this.Table.rows.length > 1 )
+		this.Table.deleteRow(1) ;
+
+	// Reset the TableRows collection.
+	this.TableRows = new Object() ;
+}
+
+oListManager.AddItem = function( folderName, folderPath )
+{
+	// Create the new row.
+	var oRow = this.Table.insertRow(-1) ;
+	oRow.className = 'FolderListFolder' ;
+
+	// Build the link to view the folder.
+	var sLink = '<a href="#" onclick="OpenFolder(\'' + folderPath + '\');return false;">' ;
+
+	// Add the folder icon cell.
+	var oCell = oRow.insertCell(-1) ;
+	oCell.width = 16 ;
+	oCell.innerHTML = sLink + '<img alt="" src="images/spacer.gif" width="16" height="16" border="0"></a>' ;
+
+	// Add the folder name cell.
+	oCell = oRow.insertCell(-1) ;
+	oCell.noWrap = true ;
+	oCell.innerHTML = '&nbsp;' + sLink + folderName + '</a>' ;
+
+	this.TableRows[ folderPath ] = oRow ;
+}
+
+oListManager.ShowUpFolder = function( upFolderPath )
+{
+	this.UpRow.style.display = ( upFolderPath != null ? '' : 'none' ) ;
+
+	if ( upFolderPath != null )
+	{
+		document.getElementById('linkUpIcon').onclick = document.getElementById('linkUp').onclick = function()
+		{
+			LoadFolders( upFolderPath ) ;
+			return false ;
+		}
+	}
+}
+
+function CheckLoaded()
+{
+	if ( window.top.IsLoadedActualFolder
+		&& window.top.IsLoadedCreateFolder
+		&& window.top.IsLoadedUpload
+		&& window.top.IsLoadedResourcesList )
+	{
+		window.clearInterval( iIntervalId ) ;
+		bIsLoaded = true ;
+		OpenFolder( sActiveFolder ) ;
+	}
+}
+
+function OpenFolder( folderPath )
+{
+	sActiveFolder = folderPath ;
+
+	if ( ! bIsLoaded )
+	{
+		if ( ! iIntervalId )
+			iIntervalId = window.setInterval( CheckLoaded, 100 ) ;
+		return ;
+	}
+
+	// Change the style for the select row (to show the opened folder).
+	for ( var sFolderPath in oListManager.TableRows )
+	{
+		oListManager.TableRows[ sFolderPath ].className =
+			( sFolderPath == folderPath ? 'FolderListCurrentFolder' : 'FolderListFolder' ) ;
+	}
+
+	// Set the current folder in all frames.
+	window.parent.frames['frmActualFolder'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
+	window.parent.frames['frmCreateFolder'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
+	window.parent.frames['frmUpload'].SetCurrentFolder( oConnector.ResourceType, folderPath ) ;
+
+	// Load the resources list for this folder.
+	window.parent.frames['frmResourcesList'].LoadResources( oConnector.ResourceType, folderPath ) ;
+}
+
+function LoadFolders( folderPath )
+{
+	// Clear the folders list.
+	oListManager.Clear() ;
+
+	// Get the parent folder path.
+	var sParentFolderPath ;
+	if ( folderPath != '/' )
+		sParentFolderPath = folderPath.substring( 0, folderPath.lastIndexOf( '/', folderPath.length - 2 ) + 1 ) ;
+
+	// Show/Hide the Up Folder.
+	oListManager.ShowUpFolder( sParentFolderPath ) ;
+
+	if ( folderPath != '/' )
+	{
+		sActiveFolder = folderPath ;
+		oConnector.CurrentFolder = sParentFolderPath ;
+		oConnector.SendCommand( 'GetFolders', null, GetFoldersCallBack ) ;
+	}
+	else
+		OpenFolder( '/' ) ;
+}
+
+function GetFoldersCallBack( fckXml )
+{
+	if ( oConnector.CheckError( fckXml ) != 0 )
+		return ;
+
+	// Get the current folder path.
+	var oNode = fckXml.SelectSingleNode( 'Connector/CurrentFolder' ) ;
+	var sCurrentFolderPath = oNode.attributes.getNamedItem('path').value ;
+
+	var oNodes = fckXml.SelectNodes( 'Connector/Folders/Folder' ) ;
+
+	for ( var i = 0 ; i < oNodes.length ; i++ )
+	{
+		var sFolderName = oNodes[i].attributes.getNamedItem('name').value ;
+		oListManager.AddItem( sFolderName, sCurrentFolderPath + sFolderName + '/' ) ;
+	}
+
+	OpenFolder( sActiveFolder ) ;
+}
+
+function SetResourceType( type )
+{
+	oConnector.ResourceType = type ;
+	LoadFolders( '/' ) ;
+}
+
+window.onload = function()
+{
+	oListManager.Init() ;
+	LoadFolders( '/' ) ;
+}
Index: editor/js/fckdialog.js
===================================================================
--- editor/js/fckdialog.js	(revision 0)
+++ editor/js/fckdialog.js	(revision 0)
@@ -0,0 +1,721 @@
+/*
+ * FCKeditor - The text editor for Internet - http://www.fckeditor.net
+ * Copyright (C) 2003-2008 Frederico Caldeira Knabben
+ *
+ * == BEGIN LICENSE ==
+ *
+ * Licensed under the terms of any of the following licenses at your
+ * choice:
+ *
+ *  - GNU General Public License Version 2 or later (the "GPL")
+ *    http://www.gnu.org/licenses/gpl.html
+ *
+ *  - GNU Lesser General Public License Version 2.1 or later (the "LGPL")
+ *    http://www.gnu.org/licenses/lgpl.html
+ *
+ *  - Mozilla Public License Version 1.1 or later (the "MPL")
+ *    http://www.mozilla.org/MPL/MPL-1.1.html
+ *
+ * == END LICENSE ==
+ */
+
+// Domain relaxation logic.
+(function()
+{
+	var d = document.domain ;
+
+	while ( true )
+	{
+		// Test if we can access a parent property.
+		try
+		{
+			var parentDomain = ( Args().TopWindow || E ).document.domain ;
+
+			if ( document.domain != parentDomain )
+				document.domain = parentDomain ;
+
+			break ;
+		}
+		catch( e ) {}
+
+		// Remove a domain part: www.mytest.example.com => mytest.example.com => example.com ...
+		d = d.replace( /.*?(?:\.|$)/, '' ) ;
+
+		if ( d.length == 0 )
+			break ;		// It was not able to detect the domain.
+
+		document.domain = d ;
+	}
+})() ;
+
+var E = frameElement._DialogArguments.Editor ;
+
+// It seems referencing to frameElement._DialogArguments directly would lead to memory leaks in IE.
+// So let's use functions to access its members instead.
+function Args()
+{
+	return frameElement._DialogArguments ;
+}
+
+function ParentDialog( dialog )
+{
+	return dialog ? dialog._ParentDialog : frameElement._ParentDialog ;
+}
+
+var FCK				= E.FCK ;
+var FCKTools		= E.FCKTools ;
+var FCKDomTools		= E.FCKDomTools ;
+var FCKDialog		= E.FCKDialog ;
+var FCKBrowserInfo	= E.FCKBrowserInfo ;
+var FCKConfig		= E.FCKConfig ;
+
+// Steal the focus so that the caret would no longer stay in the editor iframe.
+window.focus() ;
+
+// Sets the Skin CSS
+document.write( FCKTools.GetStyleHtml( FCKConfig.SkinDialogCSS ) ) ;
+
+// Sets the language direction.
+var langDir = document.documentElement.dir = E.FCKLang.Dir ;
+
+// For IE6-, the fck_dialog_ie6.js is loaded, used to fix limitations in the browser.
+if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
+	document.write( '<' + 'script type="text/javascript" src="' + FCKConfig.SkinPath + 'fck_dialog_ie6.js"><' + '\/script>' ) ;
+
+FCKTools.RegisterDollarFunction( window ) ;
+
+// Resize related functions.
+var Sizer = function()
+{
+	var bAutoSize = false ;
+
+	var retval = {
+		// Sets whether the dialog should auto-resize according to its content's height.
+		SetAutoSize : function( autoSize )
+		{
+			bAutoSize = autoSize ;
+			this.RefreshSize() ;
+		},
+
+		// Fit the dialog container's layout to the inner iframe's external size.
+		RefreshContainerSize : function()
+		{
+			var frmMain = $( 'frmMain' ) ;
+
+			if ( frmMain )
+			{
+				// Get the container size.
+				var height = $( 'contents' ).offsetHeight ;
+
+				// Subtract the size of other elements.
+				height -= $( 'TitleArea' ).offsetHeight ;
+				height -= $( 'TabsRow' ).offsetHeight ;
+				height -= $( 'PopupButtons' ).offsetHeight ;
+
+				frmMain.style.height = Math.max( height, 0 ) + 'px' ;
+			}
+		},
+
+		// Resize and re-layout the dialog.
+		// Triggers the onresize event for the layout logic.
+		ResizeDialog : function( width, height )
+		{
+			FCKDomTools.SetElementStyles( window.frameElement,
+					{
+						'width' : width + 'px',
+						'height' : height + 'px'
+					} ) ;
+
+			// If the skin have defined a function for resize fixes, call it now.
+			if ( typeof window.DoResizeFixes == 'function' )
+				window.DoResizeFixes() ;
+		},
+
+		// if bAutoSize is true, automatically fit the dialog size and layout to
+		// accomodate the inner iframe's internal height.
+		// if bAutoSize is false, then only the layout logic for the dialog decorations
+		// is run to accomodate the inner iframe's external height.
+		RefreshSize : function()
+		{
+			if ( bAutoSize )
+			{
+				var frmMain		= $( 'frmMain' ) ;
+				var innerDoc	= frmMain.contentWindow.document ;
+				var isStrict	= FCKTools.IsStrictMode( innerDoc ) ;
+
+				// Get the size of the frame contents.
+				var innerWidth	= isStrict ? innerDoc.documentElement.scrollWidth : innerDoc.body.scrollWidth ;
+				var innerHeight	= isStrict ? innerDoc.documentElement.scrollHeight : innerDoc.body.scrollHeight ;
+
+				// Get the current frame size.
+				var frameSize = FCKTools.GetViewPaneSize( frmMain.contentWindow ) ;
+
+				var deltaWidth	= innerWidth - frameSize.Width ;
+				var deltaHeight	= innerHeight - frameSize.Height ;
+
+				// If the contents fits the current size.
+				if ( deltaWidth <= 0 && deltaHeight <= 0 )
+					return ;
+
+				var dialogWidth		= frameElement.offsetWidth + Math.max( deltaWidth, 0 ) ;
+				var dialogHeight	= frameElement.offsetHeight + Math.max( deltaHeight, 0 ) ;
+
+				this.ResizeDialog( dialogWidth, dialogHeight ) ;
+			}
+			this.RefreshContainerSize() ;
+		}
+	}
+
+	/**
+	 * Safari seems to have a bug with the time when RefreshSize() is executed - it
+	 * thinks frmMain's innerHeight is 0 if we query the value too soon after the
+	 * page is loaded in some circumstances. (#1316)
+	 * TODO : Maybe this is not needed anymore after #35.
+	 */
+	if ( FCKBrowserInfo.IsSafari )
+	{
+		var originalRefreshSize = retval.RefreshSize ;
+
+		retval.RefreshSize = function()
+		{
+			FCKTools.SetTimeout( originalRefreshSize, 1, retval ) ;
+		}
+	}
+
+	window.onresize = function()
+	{
+		retval.RefreshContainerSize() ;
+	}
+
+	window.SetAutoSize = FCKTools.Bind( retval, retval.SetAutoSize ) ;
+
+	return retval ;
+}() ;
+
+// Manages the throbber image that appears if the inner part of dialog is taking too long to load.
+var Throbber = function()
+{
+	var timer ;
+
+	var updateThrobber = function()
+	{
+		var throbberParent = $( 'throbberBlock' ) ;
+		var throbberBlocks = throbberParent.childNodes ;
+		var lastClass = throbberParent.lastChild.className ;
+
+		// From the last to the second one, copy the class from the previous one.
+		for ( var i = throbberBlocks.length - 1 ; i > 0 ; i-- )
+			throbberBlocks[i].className = throbberBlocks[i-1].className ;
+
+		// For the first one, copy the last class (rotation).
+		throbberBlocks[0].className = lastClass ;
+	}
+
+	return {
+		Show : function( waitMilliseconds )
+		{
+			// Auto-setup the Show function to be called again after the
+			// requested amount of time.
+			if ( waitMilliseconds && waitMilliseconds > 0 )
+			{
+				timer = FCKTools.SetTimeout( this.Show, waitMilliseconds, this, null, window ) ;
+				return ;
+			}
+
+			var throbberParent = $( 'throbberBlock' ) ;
+
+			// Create the throbber blocks.
+			var classIds = [ 1,2,3,4,5,4,3,2 ] ;
+			while ( classIds.length > 0 )
+				throbberParent.appendChild( document.createElement( 'div' ) ).className = ' throbber_' + classIds.shift() ;
+
+			// Center the throbber.
+			var frm = $( 'contents' ) ;
+			var frmCoords = FCKTools.GetDocumentPosition( window, frm ) ;
+			var x = frmCoords.x + ( frm.offsetWidth - throbberParent.offsetWidth ) / 2 ;
+			var y = frmCoords.y + ( frm.offsetHeight - throbberParent.offsetHeight ) / 2 ;
+			throbberParent.style.left = parseInt( x, 10 ) + 'px' ;
+			throbberParent.style.top = parseInt( y, 10 ) + 'px' ;
+
+			// Show it.
+			throbberParent.style.visibility = ''  ;
+
+			// Setup the animation interval.
+			timer = setInterval( updateThrobber, 100 ) ;
+		},
+
+		Hide : function()
+		{
+			if ( timer )
+			{
+				clearInterval( timer ) ;
+				timer = null ;
+			}
+
+			var throbberParent = document.getElementById( 'throbberBlock' ) ;
+			if ( throbberParent )
+				FCKDomTools.RemoveNode( throbberParent ) ;
+		}
+	} ;
+}() ;
+
+// Drag and drop handlers.
+var DragAndDrop = function()
+{
+	var registeredWindows = [] ;
+	var lastCoords ;
+	var currentPos ;
+
+	var cleanUpHandlers = function()
+	{
+		for ( var i = 0 ; i < registeredWindows.length ; i++ )
+		{
+			FCKTools.RemoveEventListener( registeredWindows[i].document, 'mousemove', dragMouseMoveHandler ) ;
+			FCKTools.RemoveEventListener( registeredWindows[i].document, 'mouseup', dragMouseUpHandler ) ;
+		}
+	}
+
+	var dragMouseMoveHandler = function( evt )
+	{
+		if ( !lastCoords )
+			return ;
+
+		if ( !evt )
+			evt = FCKTools.GetElementDocument( this ).parentWindow.event ;
+
+		// Updated the last coordinates.
+		var currentCoords =
+		{
+			x : evt.screenX,
+			y : evt.screenY
+		} ;
+
+		currentPos =
+		{
+			x : currentPos.x + ( currentCoords.x - lastCoords.x ),
+			y : currentPos.y + ( currentCoords.y - lastCoords.y )
+		} ;
+
+		lastCoords = currentCoords ;
+
+		frameElement.style.left	= currentPos.x + 'px' ;
+		frameElement.style.top	= currentPos.y + 'px' ;
+
+		if ( evt.preventDefault )
+			evt.preventDefault() ;
+		else
+			evt.returnValue = false ;
+	}
+
+	var dragMouseUpHandler = function( evt )
+	{
+		if ( !lastCoords )
+			return ;
+		if ( !evt )
+			evt = FCKTools.GetElementDocument( this ).parentWindow.event ;
+		cleanUpHandlers() ;
+		lastCoords = null ;
+	}
+
+	return {
+
+		MouseDownHandler : function( evt )
+		{
+			var view = null ;
+			if ( !evt )
+			{
+				view = FCKTools.GetElementDocument( this ).parentWindow ;
+				evt = view.event ;
+			}
+			else
+				view = evt.view ;
+
+			var target = evt.srcElement || evt.target ;
+			if ( target.id == 'closeButton' || target.className == 'PopupTab' || target.className == 'PopupTabSelected' )
+				return ;
+
+			lastCoords =
+			{
+				x : evt.screenX,
+				y : evt.screenY
+			} ;
+
+			// Save the current IFRAME position.
+			currentPos =
+			{
+				x : parseInt( FCKDomTools.GetCurrentElementStyle( frameElement, 'left' ), 10 ),
+				y : parseInt( FCKDomTools.GetCurrentElementStyle( frameElement, 'top' ), 10 )
+			} ;
+
+			for ( var i = 0 ; i < registeredWindows.length ; i++ )
+			{
+				FCKTools.AddEventListener( registeredWindows[i].document, 'mousemove', dragMouseMoveHandler ) ;
+				FCKTools.AddEventListener( registeredWindows[i].document, 'mouseup', dragMouseUpHandler ) ;
+			}
+
+			if ( evt.preventDefault )
+				evt.preventDefault() ;
+			else
+				evt.returnValue = false ;
+		},
+
+		RegisterHandlers : function( w )
+		{
+			registeredWindows.push( w ) ;
+		}
+	}
+}() ;
+
+// Selection related functions.
+//(Became simple shortcuts after the fix for #1990)
+var Selection =
+{
+	/**
+	 * Ensures that the editing area contains an active selection. This is a
+	 * requirement for IE, as it looses the selection when the focus moves to other
+	 * frames.
+	 */
+	EnsureSelection : function()
+	{
+		FCK.Selection.Restore() ;
+	},
+
+	/**
+	 * Get the FCKSelection object for the editor instance.
+	 */
+	GetSelection : function()
+	{
+		return FCK.Selection ;
+	},
+
+	/**
+	 * Get the selected element in the editing area (for object selections).
+	 */
+	GetSelectedElement : function()
+	{
+		return FCK.Selection.GetSelectedElement() ;
+	}
+}
+
+// Tab related functions.
+var Tabs = function()
+{
+	// Only element ids should be stored here instead of element references since setSelectedTab and TabDiv_OnClick
+	// would build circular references with the element references inside and cause memory leaks in IE6.
+	var oTabs = new Object() ;
+
+	var setSelectedTab = function( tabCode )
+	{
+		for ( var sCode in oTabs )
+		{
+			if ( sCode == tabCode )
+				$( oTabs[sCode] ).className = 'PopupTabSelected' ;
+			else
+				$( oTabs[sCode] ).className = 'PopupTab' ;
+		}
+
+		if ( typeof( window.frames["frmMain"].OnDialogTabChange ) == 'function' )
+			window.frames["frmMain"].OnDialogTabChange( tabCode ) ;
+	}
+
+	function TabDiv_OnClick()
+	{
+		setSelectedTab( this.TabCode ) ;
+	}
+
+	window.AddTab = function( tabCode, tabText, startHidden )
+	{
+		if ( typeof( oTabs[ tabCode ] ) != 'undefined' )
+			return ;
+
+		var eTabsRow = $( 'Tabs' ) ;
+
+		var oCell = eTabsRow.insertCell(  eTabsRow.cells.length - 1 ) ;
+		oCell.noWrap = true ;
+
+		var oDiv = document.createElement( 'DIV' ) ;
+		oDiv.className = 'PopupTab' ;
+		oDiv.innerHTML = tabText ;
+		oDiv.TabCode = tabCode ;
+		oDiv.onclick = TabDiv_OnClick ;
+		oDiv.id = Math.random() ;
+
+		if ( startHidden )
+			oDiv.style.display = 'none' ;
+
+		eTabsRow = $( 'TabsRow' ) ;
+
+		oCell.appendChild( oDiv ) ;
+
+		if ( eTabsRow.style.display == 'none' )
+		{
+			var eTitleArea = $( 'TitleArea' ) ;
+			eTitleArea.className = 'PopupTitle' ;
+
+			oDiv.className = 'PopupTabSelected' ;
+			eTabsRow.style.display = '' ;
+
+			if ( window.onresize )
+				window.onresize() ;
+		}
+
+		oTabs[ tabCode ] = oDiv.id ;
+
+		FCKTools.DisableSelection( oDiv ) ;
+	} ;
+
+	window.SetSelectedTab = setSelectedTab ;
+
+	window.SetTabVisibility = function( tabCode, isVisible )
+	{
+		var oTab = $( oTabs[ tabCode ] ) ;
+		oTab.style.display = isVisible ? '' : 'none' ;
+
+		if ( ! isVisible && oTab.className == 'PopupTabSelected' )
+		{
+			for ( var sCode in oTabs )
+			{
+				if ( $( oTabs[sCode] ).style.display != 'none' )
+				{
+					setSelectedTab( sCode ) ;
+					break ;
+				}
+			}
+		}
+	} ;
+}() ;
+
+// readystatechange handler for registering drag and drop handlers in cover
+// iframes, defined out here to avoid memory leak.
+// Do NOT put this function as a private function as it will induce memory leak
+// in IE and it's not detectable with Drip or sIEve and undetectable leaks are
+// really nasty (sigh).
+var onReadyRegister = function()
+{
+	if ( this.readyState != 'complete' )
+		return ;
+	DragAndDrop.RegisterHandlers( this.contentWindow ) ;
+} ;
+
+// The business logic of the dialog, dealing with operational things like
+// dialog open/dialog close/enable/disable/etc.
+(function()
+{
+	var setOnKeyDown = function( targetDocument )
+	{
+		targetDocument.onkeydown = function ( e )
+		{
+			e = e || event || this.parentWindow.event ;
+			switch ( e.keyCode )
+			{
+				case 13 :		// ENTER
+					var oTarget = e.srcElement || e.target ;
+					if ( oTarget.tagName == 'TEXTAREA' )
+						return true ;
+					Ok() ;
+					return false ;
+
+				case 27 :		// ESC
+					Cancel() ;
+					return false ;
+			}
+			return true ;
+		}
+	} ;
+
+	var contextMenuBlocker = function( e )
+	{
+		var sTagName = e.target.tagName ;
+		if ( ! ( ( sTagName == "INPUT" && e.target.type == "text" ) || sTagName == "TEXTAREA" ) )
+			e.preventDefault() ;
+	} ;
+
+	var disableContextMenu = function( targetDocument )
+	{
+		if ( FCKBrowserInfo.IsIE )
+			return ;
+
+		targetDocument.addEventListener( 'contextmenu', contextMenuBlocker, true ) ;
+	} ;
+
+	// Program entry point.
+	window.Init = function()
+	{
+		// Start the throbber timer.
+		Throbber.Show( 1000 ) ;
+
+		Sizer.RefreshContainerSize() ;
+		LoadInnerDialog() ;
+
+		FCKTools.DisableSelection( document.body ) ;
+
+		// Make the title area draggable.
+		var titleElement = $( 'header' ) ;
+		titleElement.onmousedown = DragAndDrop.MouseDownHandler ;
+
+		// Connect mousemove and mouseup events from dialog frame and outer window to dialog dragging logic.
+		DragAndDrop.RegisterHandlers( window ) ;
+		DragAndDrop.RegisterHandlers( Args().TopWindow ) ;
+
+		// Disable the previous dialog if it exists.
+		if ( ParentDialog() )
+		{
+			ParentDialog().contentWindow.SetEnabled( false ) ;
+			if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
+			{
+				var currentParent = ParentDialog() ;
+				while ( currentParent )
+				{
+					var blockerFrame = currentParent.contentWindow.$( 'blocker' ) ;
+					if ( blockerFrame.readyState == 'complete' )
+						DragAndDrop.RegisterHandlers( blockerFrame.contentWindow ) ;
+					else
+						blockerFrame.onreadystatechange = onReadyRegister ;
+					currentParent = ParentDialog( currentParent ) ;
+				}
+			}
+			else
+			{
+				var currentParent = ParentDialog() ;
+				while ( currentParent )
+				{
+					DragAndDrop.RegisterHandlers( currentParent.contentWindow ) ;
+					currentParent = ParentDialog( currentParent ) ;
+				}
+			}
+		}
+
+		// If this is the only dialog on screen, enable the background cover.
+		if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
+		{
+			var blockerFrame = FCKDialog.GetCover().firstChild ;
+			if ( blockerFrame.readyState == 'complete' )
+				DragAndDrop.RegisterHandlers( blockerFrame.contentWindow ) ;
+			else
+				blockerFrame.onreadystatechange = onReadyRegister;
+		}
+
+		// Add Enter/Esc hotkeys and disable context menu for the dialog.
+		setOnKeyDown( document ) ;
+		disableContextMenu( document ) ;
+	} ;
+
+	window.LoadInnerDialog = function()
+	{
+		if ( window.onresize )
+			window.onresize() ;
+
+		// First of all, translate the dialog box contents.
+		E.FCKLanguageManager.TranslatePage( document ) ;
+
+		// Create the IFRAME that holds the dialog contents.
+		$( 'innerContents' ).innerHTML = '<iframe id="frmMain" src="' + Args().Page + '" name="frmMain" frameborder="0" width="100%" height="100%" scrolling="auto" style="visibility: hidden;" allowtransparency="true"></iframe>' ;
+	} ;
+
+	window.InnerDialogLoaded = function()
+	{
+		// If the dialog has been closed before the iframe is loaded, do nothing.
+		if ( !frameElement.parentNode )
+			return null ;
+
+		Throbber.Hide() ;
+
+		var frmMain = $('frmMain') ;
+		var innerWindow = frmMain.contentWindow ;
+		var innerDoc = innerWindow.document ;
+
+		// Show the loaded iframe.
+		frmMain.style.visibility = '' ;
+
+		// Set the language direction.
+		innerDoc.documentElement.dir = langDir ;
+
+		// Sets the Skin CSS.
+		innerDoc.write( FCKTools.GetStyleHtml( FCKConfig.SkinDialogCSS ) ) ;
+
+		setOnKeyDown( innerDoc ) ;
+		disableContextMenu( innerDoc ) ;
+
+		Sizer.RefreshContainerSize();
+
+		DragAndDrop.RegisterHandlers( innerWindow ) ;
+
+		innerWindow.focus() ;
+
+		return E ;
+	} ;
+
+	window.SetOkButton = function( showIt )
+	{
+		$('btnOk').style.visibility = ( showIt ? '' : 'hidden' ) ;
+	} ;
+
+	window.Ok = function()
+	{
+		Selection.EnsureSelection() ;
+
+		var frmMain = window.frames["frmMain"] ;
+
+		if ( frmMain.Ok && frmMain.Ok() )
+			CloseDialog() ;
+		else
+			frmMain.focus() ;
+	} ;
+
+	window.Cancel = function( dontFireChange )
+	{
+		Selection.EnsureSelection() ;
+		return CloseDialog( dontFireChange ) ;
+	} ;
+
+	window.CloseDialog = function( dontFireChange )
+	{
+		Throbber.Hide() ;
+
+		// Points the src to a non-existent location to avoid loading errors later, in case the dialog
+		// haven't been completed loaded at this point.
+		if ( $( 'frmMain' ) )
+			$( 'frmMain' ).src = FCKTools.GetVoidUrl() ;
+
+		if ( !dontFireChange && !FCK.EditMode )
+		{
+			// All dialog windows, by default, will fire the "OnSelectionChange"
+			// event, no matter the Ok or Cancel button has been pressed.
+			// It seems that OnSelectionChange may enter on a concurrency state
+			// on some situations (#1965), so we should put the event firing in
+			// the execution queue instead of executing it immediately.
+			setTimeout( function()
+				{
+					FCK.Events.FireEvent( 'OnSelectionChange' ) ;
+				}, 0 ) ;
+		}
+
+		FCKDialog.OnDialogClose( window ) ;
+	} ;
+
+	window.SetEnabled = function( isEnabled )
+	{
+		var cover = $( 'cover' ) ;
+		cover.style.display = isEnabled ? 'none' : '' ;
+
+		if ( FCKBrowserInfo.IsIE && !FCKBrowserInfo.IsIE7 )
+		{
+			if ( !isEnabled )
+			{
+				// Inser the blocker IFRAME before the cover.
+				var blocker = document.createElement( 'iframe' ) ;
+				blocker.src = FCKTools.GetVoidUrl() ;
+				blocker.hideFocus = true ;
+				blocker.frameBorder = 0 ;
+				blocker.id = blocker.className = 'blocker' ;
+				cover.appendChild( blocker ) ;
+			}
+			else
+			{
+				var blocker = $( 'blocker' ) ;
+				if ( blocker && blocker.parentNode )
+					blocker.parentNode.removeChild( blocker ) ;
+			}
+		}
+	} ;
+})() ;
